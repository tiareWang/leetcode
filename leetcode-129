129. Sum Root to Leaf Numbers  Medium

You are given the root of a binary tree containing digits from 0 to 9 only.
Each root-to-leaf path in the tree represents a number.
For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.
A leaf node is a node with no children.

Example 1:
Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.

Example 2:
Input: root = [4,9,0,5,1]
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.

Constraints:
The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 9
The depth of the tree will not exceed 10.


class Solution {
    int res = 0;
    public int sumNumbers(TreeNode root) {
        if(root == null){
            return 0;
        }
        dfs(root, 0);
        return res;
    }
    public void dfs(TreeNode root, int cur){
        cur = cur * 10 + root.val;
        if(root.left == null && root.right == null){
            res += cur;
        }
        if(root.left != null){
            dfs(root.left, cur);
        }
        if(root.right != null){
            dfs(root.right, cur);
        }
    }
}


//用StringBuilder的问题在于，StringBuilder非常量，是一个class，所以会一直存在，需要对它进行append和delete
class Solution {
    int res = 0;
    public int sumNumbers(TreeNode root) {
        if(root == null){
            return 0;
        }
        StringBuilder sb = new StringBuilder();
        sum(root, sb);
        return res;
    }
    public void sum(TreeNode root, StringBuilder sb){
        sb.append(root.val);
        if(root.left == null && root.right == null){
            res += Integer.parseInt(sb.toString());
            sb.deleteCharAt(sb.length()-1);
            return;
        }
        if(root.left != null){
            sum(root.left, sb);
        }
        if(root.right != null){
            sum(root.right, sb);
        }
        sb.deleteCharAt(sb.length()-1);
        return;
    }
}
