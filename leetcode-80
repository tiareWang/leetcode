80. Remove Duplicates from Sorted Array II
Medium

Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.

Return k after placing the final result in the first k slots of nums.

Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.

Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

Example 1:

Input: nums = [1,1,1,2,2,3]
Output: 5, nums = [1,1,2,2,3,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,0,1,1,1,1,2,3,3]
Output: 7, nums = [0,0,1,1,2,3,3,_,_]
Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

class Solution {
    public int removeDuplicates(int[] nums) {
        int j = 0;
        int count = 1;
        for(int i = 1; i < nums.length; i++){
            //当遇到和之前不一样的值时，就是开始验证前一个相同值的时候了
            if(nums[i] != nums[j]){
                //如果数量多于2，则只取两个，因为第一个值已经配好了，只需要将j+1设为和j一样的值即可
                //i的值要放在j+2的位置，然后j=j+2，开始进行下一个数值的对比
                if(count >= 2){
                    nums[j+1] = nums[j];
                    nums[j+2] = nums[i];
                    count = 1;
                    j = j+2;
                } else {
                    nums[j+1] = nums[i];
                    j = j + 1;
                }
            } else {
                count++;
            }
        }
        //最后数值的确认，因为最后的数值没有再对比的机会，只能等到i到了nums的最后
        if(count >= 2){
            nums[j+1] = nums[j];
            j = j+2;
        } else {
            j = j +1;
        }
        return j;
    }
}
