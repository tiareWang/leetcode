82. Remove Duplicates from Sorted List II   Medium

Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.

Example 1:
Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]

Example 2:
Input: head = [1,1,1,2,3]
Output: [2,3]

Constraints:
The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode res = new ListNode(0);
        if(head == null){
            return head;
        }
        ListNode cur = res;
        ListNode comp = head;
        boolean flag = false;
        head = head.next;
        while(head != null){
            if(head.val == comp.val){
                flag = true;
            } else {
                if(flag){
                    comp = head;
                    flag = false;
                } else {
                    cur.next = comp;
                    cur = cur.next;
                    comp = head;
                }
            }
            head = head.next;
        }
        if(!flag){
            cur.next = comp;
        } else {
            cur.next = null;
        }
        return res.next;
    }
}
