190. Reverse Bits  Easy

Reverse bits of a given 32 bits unsigned integer.
Note:
Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.
 
Example 1:
Input: n = 00000010100101000001111010011100
Output:    964176192 (00111001011110000010100101000000)
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.

Example 2:
Input: n = 11111111111111111111111111111101
Output:   3221225471 (10111111111111111111111111111111)
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.

Constraints:
The input must be a binary string of length 32

Follow up: If this function is called many times, how would you optimize it?

public class Solution {
    // you need treat n as an unsigned value
    //一共是32bit，反转就是把结果不断左移，n先和1比较，找出最右值是不是1，
    //将值放入结果中，左移最后一值为0，加入值会保持原值，再不断右移，这样就会实现最右值不断想左移动，实现reverse
    public int reverseBits(int n) {
        int res = 0;
        int i = 32;
        while(i > 0){
            res <<= 1;
            res += n & 1;
            n >>= 1;
            i--;
        }
        return res;
    }
}

We start with an answer variable set to 0. Write a for loop that will run 32 times (once for each bit). In the loop we will:
Move the answer's bits to the left.
ans <<= 1;
Check if the current bit is 1 and add it to the answer if it is.
ans |= (n & 1);
Move to the next bit in the given number.
n >>= 1;
After this process, the answer will have the reversed bits.
