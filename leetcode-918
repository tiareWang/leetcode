918. Maximum Sum Circular Subarray  Medium

Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.
A circular array means the end of the array connects to the beginning of the array. 
Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].
A subarray may only include each element of the fixed buffer nums at most once. 
Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.

Example 1:
Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.

Example 2:
Input: nums = [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.

Example 3:
Input: nums = [-3,-2,-3]
Output: -2
Explanation: Subarray [-2] has maximum sum -2.
 

Constraints:
n == nums.length
1 <= n <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104

/**
class Solution {
    public int maxSubarraySumCircular(int[] nums) {
        int len = nums.length;
        int[] dp = new int[len*2-1];
        int[] start = new int[len*2-1];
        dp[0] = nums[0];
        start[0] = 0;
        int res = nums[0];
        for(int i = 1; i < len*2-1; i++){
            if(i >= len){
                int star = start[i-1];
                if(star >= i-len){
                    if(dp[i-1]+nums[i-len] > nums[i-len]){
                        dp[i] += nums[i-len];
                        start[i] = start[i-1];
                    } else {
                        dp[i] = nums[i-len];
                        start[i] = i;
                    }
                } else {
                    dp[i]=dp[i-1];
                    while(star < i-len){
                        dp[i] -= nums[star]; 
                        star++;
                    }
                    if(dp[i]+nums[i-len] > nums[i-len]){
                        dp[i] += nums[i-len];
                        start[i] = i-len;
                    } else {
                        dp[i] = nums[i-len];
                        start[i] = i;
                    }
                }
            } else {
                if(nums[i] >= dp[i-1]+nums[i]){
                    dp[i] = nums[i];
                    start[i] = i;
                } else {
                    dp[i] = dp[i-1]+nums[i];
                    start[i] = start[i-1];
                }
            }
            if(res < dp[i]){
                res = dp[i];
            }
        }
        return res;
    }
}
*/
//要不然maxSum中间，要不然minSum在中间，所以两种方式内容都找一遍，看maxSum大还是totalSum-minSum大
class Solution {
    public int maxSubarraySumCircular(int[] nums) {
        int n = nums.length;
        int maxSum = nums[0], minSum = nums[0], curMax=0, curMin=0;
        int totalSum = 0;
        for(int num : nums){
            curMax = Math.max(curMax + num, num);
            maxSum = Math.max(maxSum, curMax);
            curMin = Math.min(curMin + num, num);
            minSum = Math.min(minSum, curMin);
            totalSum+=num;
        }
        if(maxSum > 0){
            return Math.max(maxSum, totalSum-minSum);
        }
        return maxSum;
    }
}
