92. Reverse Linked List II  Medium

Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

Example 1:
Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]

Example 2:
Input: head = [5], left = 1, right = 1
Output: [5]

Constraints:
The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n

class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode res = new ListNode(0);
        ListNode leftNode = res;
        ListNode mid = new ListNode(0);
        int num = 1;
        if(num != left){
            res.next = head;
        }
        while(num != left){
            if(num == left-1){
                leftNode = head;
            }
            head = head.next;
            num ++;
        }
        ListNode tem = head;
        while(num != right+1){
            ListNode temp = head.next;
            head.next = mid.next;
            mid.next = head;
            head = temp;
            num++;
        }
        leftNode.next = mid.next;
        tem.next = head;
        return res.next;

    }
}
