61. Rotate List  Medium

Given the head of a linked list, rotate the list to the right by k places.

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

Example 2:
Input: head = [0,1,2], k = 4
Output: [2,0,1]

Constraints:
The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109

class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head==null || head.next==null ||k==0) 
            return head;
        ListNode res = new ListNode(0);
        ListNode temp = res;
        int len = 0;
        ListNode cur = head;
        while(cur != null){
            len++;
            cur = cur.next;
        }
        k = k % len;
        if(len == k){
            return head;
        }
        cur = head;
        while(len > k+1){
            cur = cur.next;
            len--;
        }
        temp.next = cur.next;
        cur.next = null;
        while(temp.next != null){
            temp = temp.next;
        }
        temp.next = head;
        return res.next;
    }
}

//rotate the listnode by cycle the listnode

class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head==null || head.next==null ||k==0) 
            return head;
        int len = 1;
        ListNode cur = head;
        while(cur.next != null){
            len++;
            cur = cur.next;
        }
        cur.next = head;
        k = k % len;
        if(len == k){
            return head;
        }
        while(len >= k+1){
            cur = cur.next;
            len--;
        }
        head = cur.next;
        cur.next = null;
        return head;
    }
}
