373. Find K Pairs with Smallest Sums  Medium

You are given two integer arrays nums1 and nums2 sorted in non-decreasing order and an integer k.
Define a pair (u, v) which consists of one element from the first array and one element from the second array.
Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.

Example 1:
Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]
Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]

Example 2:
Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [[1,1],[1,1]]
Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]

Constraints:
1 <= nums1.length, nums2.length <= 105
-109 <= nums1[i], nums2[i] <= 109
nums1 and nums2 both are sorted in non-decreasing order.
1 <= k <= 104
k <= nums1.length * nums2.length

class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        List<List<Integer>> res = new LinkedList<>();
        Queue<int[]> queue = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for(int x : nums1){
            queue.add(new int[]{x+nums2[0], 0});
        }        
        while(k > 0 && !queue.isEmpty()){
            int[] pair = queue.poll();
            int sum = pair[0];
            int pos = pair[1];
            List<Integer> list = new LinkedList<>();
            list.add(sum-nums2[pos]);
            list.add(nums2[pos]);
            res.add(list);
            if(pos+1 < nums2.length){
                queue.add(new int[]{sum-nums2[pos]+nums2[pos+1], pos+1});
            }
            k--;
        }
        return res;
    }
}
Approach
Create an empty result vector resV to store the k smallest pairs.
Create a priority queue pq to store pairs of elements from nums1 and nums2 with the smallest sums. The pairs are sorted by their sum in ascending order.
Iterate through each element x in nums1.
Calculate the sum of x and the first element of nums2 (since nums2 is sorted, the first element has the smallest value).
Push the pair consisting of the sum and the index of the first element in nums2 (which is 0) into the priority queue.
While k is greater than 0 and the priority queue is not empty, perform the following steps:
Get the pair with the smallest sum from the top of the priority queue.
Extract the sum and the index from the pair.
Create a pair by subtracting the value of the second element in the pair from the sum and the value of the second element itself.
Add the created pair to the result vector resV.
Remove the pair from the priority queue.
If there are more elements in nums2 (i.e., the index of the second element is less than the size of nums2 minus 1), calculate the sum of the next pair by subtracting the current second element from the sum and adding the next element in nums2. Push this new pair into the priority queue.
Decrement k by 1.
Return the resulting vector resV containing the k smallest pairs.
做leetcode真的很像在学数学找规律，但我真的很不喜欢奥赛，好像自己没有自主创新的能力
