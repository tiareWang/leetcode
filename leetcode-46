46. Permutations  Medium

Given an array nums of distinct integers, return all the possible permutations. 
You can return the answer in any order. 

Example 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:
Input: nums = [1]
Output: [[1]]

Constraints:
1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

class Solution {
    List<List<Integer>> res = new LinkedList<>();
    public List<List<Integer>> permute(int[] nums) {
        helper(nums, new LinkedList<Integer>());
        return res;
    }
    public void helper(int[] nums, List<Integer> list){
        if(list.size() == nums.length){
            res.add(new LinkedList<Integer>(list));
            return;
        }
        for(int num : nums){
            if(!list.contains(num)){
                list.add(num);
                helper(nums, list);
                list.remove(list.size()-1);
            }
        }
    }
}
