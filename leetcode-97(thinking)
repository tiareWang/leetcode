97. Interleaving String  Medium

Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.
An interleaving of two strings s and t is a configuration where s and t are divided into n and m 
substrings respectively, such that:
s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

Example 1:
Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Explanation: One way to obtain s3 is:
Split s1 into s1 = "aa" + "bc" + "c", and s2 into s2 = "dbbc" + "a".
Interleaving the two splits, we get "aa" + "dbbc" + "bc" + "a" + "c" = "aadbbcbcac".
Since s3 can be obtained by interleaving s1 and s2, we return true.

Example 2:
Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.

Example 3:
Input: s1 = "", s2 = "", s3 = ""
Output: true 

Constraints:
0 <= s1.length, s2.length <= 100
0 <= s3.length <= 200
s1, s2, and s3 consist of lowercase English letters.

class Solution {
// Create a 2D DP table where dp[i][j] represents 
//whether the first i characters of s1 and the first j characters of s2 can 
//form the first i+j characters of s3.
    public boolean isInterleave(String s1, String s2, String s3) {
        if(s1.length() + s2.length() != s3.length()){
            return false;
        }
        int m = s1.length();
        int n = s2.length();
        boolean[][]dp = new boolean[s1.length()+1][s2.length()+1];
        dp[0][0]=true;
        for(int i = 0; i < m ;i++){
            if(s1.substring(0, i+1).equals(s3.substring(0, i+1))){
                dp[i+1][0] = true;
            }
        }
        for(int i = 0; i < n; i++){
            if(s2.substring(0,i+1).equals(s3.substring(0,i+1))){
                dp[0][i+1] = true;
            }
        }
        //dp[i][j]不代表前i和前j都是各自连在一起的，我们只要考虑他们都存在是否可以构成i+j个，
        //因为在后续判断过程中就已经考虑了顺序问题
        //其实只看最后一位就可以了，不需要考虑位置，因为虽然ab会打乱相互穿插的顺序，
        //但最后一个不会跑到最前面，只要看a或b的最后一位是否满足，满足的同时也要看a-1/b-1时候是否满足，这样才能保证a/b时真正满足
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                if(s1.charAt(i-1) == s3.charAt(i+j-1)){
                    if(dp[i-1][j] == true){
                        dp[i][j] = true;
                    }
                }
                if(s2.charAt(j-1) == s3.charAt(i+j-1)){
                    if(dp[i][j-1] == true){
                        dp[i][j] = true;
                    }
                }
            }
        }
        return dp[m][n]; 
        
    }
}
