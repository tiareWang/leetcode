Rotate 

Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105

solution 1:
class Solution {
    public void rotate(int[] nums, int k) {
        if(k == nums.length){
            return;
        }
        k = k % nums.length;
        int[] ans = new int[nums.length];
        int j = 0;
        for(int i=nums.length-k;i<nums.length;i++){
            ans[j]=nums[i];
            j++;
        }
        for(int i = 0; i < nums.length-k;i++){
            ans[j] = nums[i];
            j++;
        }
        for(int i = 0; i < nums.length; i++){
            nums[i] = ans[i];
        }
        return;
    }
}


solution 2:
/** Intuition
Reverse the entire array, after that reverse first k elements and reverse k+1 to nums.length-1 elements.
Approach
Create a swap function to swap to array elements.
Create a reverse function to reverse array from ith position to jth position.
find reminder of k divided by nums.length because k is more than nums.length we don't need to iterate huge iterations.
first of all reverse entire the array.
reverse the array from 0th index to array.length-k-1 index.
reverse the array from array.length-k index to array.length-1 index.
reverse entire the array.
 */

 class Solution {
    public void rotate(int[] nums, int k) {
        if(k == nums.length){
            return;
        }
        k = k % nums.length;
        reverse(nums,0, nums.length-k-1);
        reverse(nums, nums.length-k, nums.length-1);
        reverse(nums, 0, nums.length-1);
    }
    private void reverse(int[] nums, int i, int j){
        while(i < j){
            swap(nums, i, j);
            i++;
            j--;
        }
    }
    private void swap(int[] nums, int i, int j){
        int val = nums[j];
        nums[j] = nums[i];
        nums[i] = val;
    }
}
