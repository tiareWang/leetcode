Product of Array Except Self

Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

//For any nums[i], calculate its left product and calculate its right product, without including nums[i].
//Then multiply these left and right product, This will give product of array excluding nums[i].
//Let dp[i] to be the product from index 0 to index i-1;
//Let dp2[i] to be the product from index n to index i+1;
//Compute dp from left to right and compute dp2 from right to left.
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] res = new int[nums.length];
        //left;
        int[] dp = new int[nums.length];
        dp[0] = 1;
        //right
        int[] dp2 = new int[nums.length];
        dp2[nums.length-1] = 1;
        for(int i = 1; i < nums.length; i++){
            dp[i] = dp[i-1] * nums[i-1];
        }
        for(int i = nums.length-2; i >= 0 ; i--){
            dp2[i] = dp2[i+1] * nums[i+1];    
        }
        for(int i = 0; i < nums.length; i++){
            res[i] = dp[i]*dp2[i];
        }
        return res;
    }
}

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] res = new int[nums.length];
        //left;
        int dp = 1;
        res[0] = 1;
        for(int i = 1; i < nums.length; i++){
            dp = dp * nums[i-1];
            res[i] = dp;
        }
        dp = 1;
        for(int i = nums.length-2; i >= 0 ; i--){
            dp = dp * nums[i+1];
            res[i] *= dp;    
        }
        return res;
    }
}
