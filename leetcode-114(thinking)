114. Flatten Binary Tree to Linked List  Medium

Given the root of a binary tree, flatten the tree into a "linked list":
The "linked list" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.
The "linked list" should be in the same order as a pre-order traversal of the binary tree.

Example 1:
Input: root = [1,2,5,3,4,null,6]
Output: [1,null,2,null,3,null,4,null,5,null,6]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [0]
Output: [0]

Constraints:
The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100

binary tree通常会与dfs、bfs、recursion、stack相关

//思考过程中找到了重要的节点：左第一、左最后、右第一和右最后，但其实左第一和右第一是已知的，可以不需要去获取，recursion的过程可以获取左右的最后一个值
 //然后将左最后和右第一相连，抛出右最后，进入上一个循环中，作为左最后与上一个右第一连接，balabala...
class Solution {
    public void flatten(TreeNode root) {
        TreeNode last = null;
        preorder(root, last);
    }
    public TreeNode preorder(TreeNode cur, TreeNode last){
        if(cur == null){
            return cur;
        }
        if(cur.left == null && cur.right == null){
            return cur;
        }
        TreeNode left = cur.left;
        TreeNode right = cur.right;
        TreeNode leftLast = null;
        TreeNode rightLast = null;
        if(left != null){
            leftLast = preorder(left, leftLast);
            cur.left = null;
            cur.right = left;
            last = leftLast;
        }
        if(right != null){
            rightLast = preorder(right, rightLast);
            if(leftLast != null){
                leftLast.right = right;
            }
            last = rightLast;
        }
        return last;
    }
}
