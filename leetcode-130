130. Surrounded Regions  Medium

Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.
A region is captured by flipping all 'O's into 'X's in that surrounded region.

Example 1:
Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.

Example 2:
Input: board = [["X"]]
Output: [["X"]]

Constraints:
m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] is 'X' or 'O'.

class Solution {
    public void solve(char[][] board) {
        int m = board.length;
        int n = board[0].length;
        int[][] flag = new int[m][n];
        for(int i = 0; i < n; i++){
            if(board[0][i] == 'O' && flag[0][i] == 0){
                flip(board, flag, 0, i);
            }
            if(board[m-1][i] == 'O' && flag[m-1][i] == 0){
                flip(board, flag, m-1, i);
            }
        }
        for(int i = 0; i < m; i++){
            if(board[i][0] == 'O' && flag[i][0] == 0){
                flip(board, flag, i, 0);
            }
            if(board[i][n-1] == 'O' && flag[i][n-1] == 0){
                flip(board, flag, i, n-1);
            }
        }
        for(int i = 1; i < m-1; i++){
            for(int j = 1; j < n-1; j++){
                if(board[i][j] == 'O' && flag[i][j] == 0){
                    board[i][j] = 'X';
                }
            }
        }
    }
    public void flip(char[][] board, int[][] flag, int x, int y){
        flag[x][y] = 1;
        int[] dx = {0,0, -1, 1};
        int[] dy = {-1, 1, 0, 0};
        for(int i = 0; i < 4; i++){
            int curx = dx[i]+x;
            int cury = dy[i]+y;
            if(curx < 0 || curx >= board.length || cury < 0 || cury >= board[0].length || flag[curx][cury] == 1){
                continue;
            }
            if(board[curx][cury] == 'O'){
                flip(board, flag, curx, cury);
            }
        }
    }
}
