19. Remove Nth Node From End of List   Medium
Given the head of a linked list, remove the nth node from the end of the list and return its head. 

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:
Input: head = [1], n = 1
Output: []

Example 3:
Input: head = [1,2], n = 1
Output: [1]

Constraints:
The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode cur = head;
        int len = 0;
        while(cur != null){
            len ++;
            cur = cur.next;
        }
        if(n == len){
            return head.next;
        }
        cur = head;
        while(len > n+1){
            cur = cur.next;
            len--;
        }
        cur.next = cur.next.next;
        return head;
    }
}

Follow up: Could you do this in one pass?
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode cur = head;
        List<ListNode> list = new LinkedList<>();
        int len = 0;
        while(cur != null){
            list.add(cur);
            len ++;
            cur = cur.next;
        }
        if(n == list.size()){
            return head.next;
        }
        list.get(len-n-1).next = list.get(len-n).next;
        return head;
    }
}
