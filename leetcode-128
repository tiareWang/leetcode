Longest Consecutive Sequence   Medium

Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.
You must write an algorithm that runs in O(n) time.

Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

Example 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9

Constraints:
0 <= nums.length <= 105
-109 <= nums[i] <= 109

O(nlogn)
class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums.length == 0){
            return 0;
        }
        int res = 1;
        Arrays.sort(nums);
        int cur = 1;
        int sum = 1;
        while(cur < nums.length){
            if(nums[cur] == nums[cur-1]){
                cur++;
                continue;
            }
            if(nums[cur] == nums[cur-1]+1){
                sum ++;
                res = Math.max(res, sum);
            } else {
                sum = 1;
            }
            cur++;
        }
        return res;
        
    }
}

 
// O(n)
class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums.length == 0){
            return 0;
        }
        Set<Integer> set = new HashSet<>();
        for(int num : nums){
            set.add(num);
        }
        int sum = 1;
        int res = 1;
        for(int num : nums){
            //If the current element 'num' is the start of a sequence (no 'num-1' in 'set'),
            if(!set.contains(num-1)){
                //Update 'cur' to the current element 'num'.
                int cur = num;
                sum = 1;
                //While consecutive elements exist in 'set', increment 'sum' and 'cur'.
                while(set.contains(cur+1)){
                    sum++;
                    cur++;
                }
            }
            //Update 'res' with the maximum of 'res' and 'sum'.
            res = Math.max(sum, res);
        }
        return res;
    }
}

Approach: With Unordered Set
It handles the base case when the vector is empty (size n is 0), returning 0 because there are no consecutive elements.

It uses an unordered set s to store unique elements from the input vector, ensuring efficient lookup.

It iterates through the elements of the unordered set and checks if each element a is the start of a sequence (no a-1 in s).

If a is the start of a sequence, it resets the counter cnt to 1 and initializes x to a. Then, it iterates to find consecutive elements by incrementing x.

It updates the longest variable with the maximum of its current value and the cnt counter.

After processing all elements in the unordered set, it returns longest as the result, representing the length of the longest consecutive sequence.
