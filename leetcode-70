70. Climbing Stairs  Easy

You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:
Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Constraints:
1 <= n <= 45

class Solution {
    public int climbStairs(int n) {
        if(n == 1){
            return 1;
        }
        if(n == 2){
            return 2;
        }
        int[] sum = new int[n+1];
        sum[1] = 1;
        sum[2] = 2;
        for(int i = 3; i <= n; i++){
            sum[i] = sum[i-1]+sum[i-2];
        }
        return sum[n];
    }
}

class Solution {
    public int climbStairs(int n) {
        if(n == 1){
            return 1;
        }
        if(n == 2){
            return 2;
        }
        int beforeTheBefore = 1;
        int before = 2;
        int res = 0;
        for(int i = 3; i <= n; i++){
            res = beforeTheBefore + before;
            beforeTheBefore = before;
            before = res;
        }
        return res;
    }
}
