H-Index  Medium

Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index.
According to the definition of h-index on Wikipedia: 
The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.

Example 1:
Input: citations = [3,0,6,1,5]
Output: 3
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.
Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.

Example 2:
Input: citations = [1,3,1]
Output: 1

Constraints:
n == citations.length
1 <= n <= 5000
0 <= citations[i] <= 1000

class Solution {
    public int hIndex(int[] citations) {
        Arrays.sort(citations);
        int res = 0;
        for(int i = citations.length-1; i>= 0; i--){
            if(citations[i] >= citations.length-i){
                res = citations.length-i;
            }
        }
        return res;
    }
}

Approach
n is initialized to the length of the citations array, representing the total number of papers.
freq is initialized as an integer array of length n+1. This array will store the frequency of citations for each possible H-Index value.
For each citation count i, it increments the corresponding frequency in the freq array.
If the citation count i is greater than n, it's counted towards freq[n], as the H-Index cannot exceed the total number of papers.
The second loop starts from n and decrements i until 0. It maintains a cumulative count cnt of the number of papers with citations equal to or greater than the current index i.
If cnt is greater than or equal to i, it means there are i papers with at least i citations. This condition satisfies the definition of H-Index, so the loop returns i.
Complexity
Time complexity:O(n)O(n)O(n)
Space complexity:O(n)O(n)O(n)

class Solution {
    public int hIndex(int[] citations) {
        int n=citations.length;
        int []freq=new int[n+1]; //n+1 because maximum h index can be the length of citations 
        for(int i: citations){ //for updating the values in freq array for each possible citation
            if(i>n){
                // If the citation count is greater than the total number of papers,
                // count it towards the last index (n), as the H-Index cannot exceed n
                freq[n]++;
            }else{
                freq[i]++;
            }
        }
        int cnt=0;// Initialize a counter for accumulating the number of papers
        for(int i=n;i>=0;i--){
            cnt+=freq[i]; // Accumulate the number of papers with at least i citations

            // If the accumulated count is greater than or equal to i,
            // it satisfies the definition of H-Index, so return i
            if(cnt>=i){
                return i;
            }
        }
        return 0;
    }
}
