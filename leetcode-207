207. Course Schedule  Medium

There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. 
You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.

Example 2:
Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

Constraints:
1 <= numCourses <= 2000
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique.

class GraphNode{
        int label;
        ArrayList<GraphNode> neighbors;
        GraphNode(int x){
            label = x;
            neighbors = new ArrayList<>();
        }
    }

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if(numCourses < 2 || prerequisites.length == 0){
            return true;
        }
        GraphNode[] graph = new GraphNode[numCourses];
        for(int i = 0; i < numCourses; i++){
            graph[i] = new GraphNode(i);
        }
        int[] visit = new int[numCourses];
        for(int i = 0; i < prerequisites.length; i++){
            graph[prerequisites[i][0]].neighbors.add(graph[prerequisites[i][1]]);
        }
        for (int i = 0; i < numCourses; i++){
            if (visit[i] == 0 && !DFS_graph(graph[i],visit)){
                return false;
            }
        }
        return true;
    }
    public boolean DFS_graph(GraphNode graph, int[] visit){
        visit[graph.label] = 1;
        for (int i = 0; i < graph.neighbors.size(); i++){
            if (visit[graph.neighbors.get(i).label] == 0){
                if(!DFS_graph(graph.neighbors.get(i), visit)){
                    return false;
                } 
            }else if(visit[graph.neighbors.get(i).label] == 1){
                    return false;
            }
        }
        visit[graph.label] = 2;
        return true;
    }
}
