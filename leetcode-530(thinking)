530. Minimum Absolute Difference in BST EASY

Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.

Example 1:
Input: root = [4,2,6,1,3]
Output: 1

Example 2:
Input: root = [1,0,48,null,null,12,49]
Output: 1

Constraints:
The number of nodes in the tree is in the range [2, 104].
0 <= Node.val <= 105

//右或右的最左-中 中-左或左的最右  
class Solution {
    public int getMinimumDifference(TreeNode root) {
        int min = Integer.MAX_VALUE;
        int prev = -1;
        Stack<TreeNode> stack = new Stack<>();
        while(root != null || !stack.isEmpty()){
            while(root != null){
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            if(prev >= 0){
                min = Math.min(min, root.val - prev);
            }
            prev = root.val;
            root = root.right;
        }
        return min;
    }
}

class Solution {
    int min = Integer.MAX_VALUE;
    Integer prev = null;
    public int getMinimumDifference(TreeNode root) {
        if(root == null){
            return min;
        }
        getMinimumDifference(root.left);
        if(prev != null){
            min = Math.min(min, Math.abs(root.val-prev));
        }
        prev = root.val;
        getMinimumDifference(root.right);
        return min;
    }
}
